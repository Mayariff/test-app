{"version":3,"sources":["UI/ToDoList/ToDoList.module.css","UI/Common_Components/CustomCheckBox/CustomCheckBox.module.css","UI/Common_Components/CustomInput/CustomInput.module.css","APP/App.module.css","UI/Common_Components/Loading/Loading.module.css","UI/ToDoList/FilteringButtons/FilteringButtons.module.css","BLL/App_reducer/selectors.ts","BLL/App_reducer/types.ts","BLL/App_reducer/app-reducer.ts","BLL/App_reducer/index.ts","BLL/TodoList_reducer/selectors.ts","BLL/TodoList_reducer/types.ts","API/todo-api.ts","BLL/TodoList_reducer/todoList-reducer.ts","BLL/TodoList_reducer/index.ts","UI/Common_Components/AddingField/AddingField.tsx","UI/Common_Components/CustomButton/CustomButton.tsx","UI/Common_Components/CustomCheckBox/CustomCheckBox.tsx","UI/Common_Components/CustomInput/CustomInputText.tsx","UI/Common_Components/Loading/Loading.tsx","APP/store.ts","UI/ToDoList/TodoList.tsx","UI/ToDoList/Zadacha/Zadacha.tsx","UI/ToDoList/FilteringButtons/FilteringButtons.tsx","APP/App.tsx","reportWebVitals.ts","index.tsx","UI/Common_Components/CustomButton/CustomButton.module.css","UI/ToDoList/Zadacha/Zadacha.module.css"],"names":["module","exports","selectStatus","state","app","status","selectError","error","setStatus","setError","initialState","appReducer","action","type","appActions","selectedZadachi","todoList","SET_TODOS","ADD_TODO","UPDATE_STATUS","REMOVE_TODO","instance","axios","create","baseURL","todoApi","get","then","res","data","setAppStatus","setAppError","todolistReducer","todos","todo","map","td","id","payload","active","filter","setTodos","addTodo","todolistActions","dispatch","a","text","newZadacha","v1","AddingField","React","memo","onEnterHandler","onClickAddHandler","inputText","onchangeHandler","CustomInputText","onChange","value","onEnter","CustomButton","nameButton","onClick","disabled","length","red","className","props","finalClassName","s","default","CustomCheckBox","onChangeChecked","children","spanClassName","checkboxLabel","e","currentTarget","checked","checkbox","onChangeText","onKeyPress","finalInputClassName","errorInput","superInput","key","placeholder","Loading","loading","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","useSelector","window","TodoList","zadachi","appSelectors","useDispatch","addTodoTC","useState","setInputText","activeFilter","setActiveFilter","useCallback","trim","tasksForTodolist","z","paperContainer","tasks","t","Zadacha","task","clickCheckBox","clickRemoveBtn","FilteringButtons","clickCheckBoxHandler","clickRemoveBtnHandler","styleV","isActive","isNotActive","item","itemMenu","clickBtnAll","clickBtnActive","clickBtnCompleted","btnMenu","App","todoSelectors","changeStatus","removeTodo","fetchTodolistsTC","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74bf04b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paperContainer\":\"ToDoList_paperContainer__pMmzo\",\"value\":\"ToDoList_value__2OWmh\",\"error\":\"ToDoList_error__BofLt\",\"tasks\":\"ToDoList_tasks__1ng_C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"margin\":\"CustomCheckBox_margin__2whk3\",\"checkbox\":\"CustomCheckBox_checkbox__2b1YF\",\"checkboxLabel\":\"CustomCheckBox_checkboxLabel__1tJ7G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"CustomInput_superInput__2NUdC\",\"errorInput\":\"CustomInput_errorInput__1DYoM\",\"error\":\"CustomInput_error__2YgSR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3N6rr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__19pF6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnMenu\":\"FilteringButtons_btnMenu__2el7H\"};","import {RequestStatusType} from \"./index\";\r\nimport {AppRootStateType} from \"../../APP/store\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status as RequestStatusType\r\nexport const selectError = (state: AppRootStateType) => state.app.error","import {initialState, setAppError, setAppStatus} from \"./app-reducer\";\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ActionsType = ReturnType<typeof setAppError> | ReturnType<typeof setAppStatus>\r\n\r\nexport const setStatus = 'APP/SET-STATUS'\r\nexport const setError = 'APP/SET-ERROR'","import {ActionsType, InitialStateType, RequestStatusType, setError, setStatus} from './types';\r\n\r\nexport const initialState = {\r\n    status: 'idle',\r\n    error: null as string | null,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case setStatus :\r\n            return {...state, status: action.status}\r\n        case  setError:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n//action creators\r\nexport const setAppError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1} from './types'\r\nimport {appReducer as AppReducer, setAppError, setAppStatus} from './app-reducer';\r\n\r\n\r\nconst appReducer = AppReducer\r\n\r\nconst appActions = {\r\n    setAppError,\r\n    setAppStatus\r\n}\r\nexport type RequestStatusType = T1\r\n\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions,\r\n}\r\n","import {AppRootStateType} from '../../APP/store';\r\n\r\n\r\nexport const selectedZadachi = (state: AppRootStateType) => state.todoList","import {addTodo, changeStatus, removeTodo, setTodos} from './todoList-reducer';\r\n\r\nexport const SET_TODOS = 'todolistReducer/set_todos/polychit_zadachi'\r\nexport const ADD_TODO = 'todolistReducer/add_todo/dobavit_zadachy'\r\nexport const UPDATE_STATUS = 'todolistReducer/update_todo-status/izmenit_status_zadachi'\r\nexport const REMOVE_TODO = 'todolistReducer/remove_todo/ydalit_zadachi'\r\n\r\n\r\nexport type zadachiType = {\r\n    id: string,\r\n    text: string,\r\n    active: boolean\r\n}\r\nexport type InitialStateType = Array<zadachiType>\r\n\r\nexport type ActionsType = ReturnType<typeof setTodos> | ReturnType<typeof addTodo>\r\n    | ReturnType<typeof changeStatus> | ReturnType<typeof removeTodo>","import axios from 'axios';\r\nimport {zadachiType} from \"../BLL/TodoList_reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://my-json-server.typicode.com/falk20/demo/\",\r\n})\r\n\r\nexport const todoApi = {\r\n    getTodoZadachi() {\r\n        return instance.get<Array<zadachiType>>('todos').then(res => res.data);\r\n    }\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {v1} from 'uuid';\r\nimport {ActionsType, ADD_TODO, InitialStateType, REMOVE_TODO, SET_TODOS, UPDATE_STATUS} from './types';\r\nimport {appActions} from '../App_reducer';\r\nimport {zadachiType} from './index';\r\nimport {todoApi} from '../../API/todo-api';\r\n\r\nconst {setAppStatus, setAppError} = appActions\r\n\r\nconst initialState = [] as InitialStateType\r\n\r\n\r\nexport const todolistReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_TODOS: {\r\n            return action.todos\r\n        }\r\n        case ADD_TODO: {\r\n            return [action.todo, ...state]\r\n        }\r\n        case UPDATE_STATUS: {\r\n            return state.map(td => td.id === action.payload.id ? {...td, active: action.payload.active} : td)\r\n        }\r\n        case REMOVE_TODO: {\r\n            return state.filter(td => td.id !== action.id)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setTodos = (todos: Array<zadachiType>) => ({type: SET_TODOS, todos} as const)\r\nexport const addTodo = (todo: zadachiType) => ({type: ADD_TODO, todo} as const)\r\nexport const changeStatus = (id: string, active: boolean) => ({type: UPDATE_STATUS, payload:{id, active}} as const)\r\nexport const removeTodo = (id: string) => ({type: REMOVE_TODO, id} as const)\r\n\r\n\r\n\r\n\r\n// thunk creators\r\nexport const fetchTodolistsTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const res = await todoApi.getTodoZadachi()\r\n        dispatch(setTodos(res))\r\n    } catch (err) {\r\n        dispatch(setAppError('Задачи не загружены. Попробуйте позже'))\r\n    } finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n    }\r\n}\r\nexport const addTodoTC = (text: string) => (dispatch: Dispatch) => {\r\n    //хотела сохранить чистоту рельюсера, поэтому рандомное присваивание id вынесла в санку+ она потом будет нужна для отправки на сервер\r\n    const newZadacha: zadachiType = {\r\n        text,\r\n        active: false,\r\n        id: v1()\r\n    }\r\n    dispatch(addTodo(newZadacha))\r\n}","import * as todoSelectors from './selectors'\r\nimport {ActionsType, zadachiType as T1} from './types'\r\nimport {\r\n    addTodo,\r\n    addTodoTC,\r\n    changeStatus,\r\n    fetchTodolistsTC,\r\n    removeTodo,\r\n    setTodos,\r\n    todolistReducer as TodolistReducer\r\n} from \"./todoList-reducer\";\r\n\r\n\r\nconst todolistReducer = TodolistReducer\r\n\r\n\r\nconst todolistActions = {\r\n    setTodos,\r\n    addTodo,\r\n    changeStatus,\r\n    removeTodo,\r\n    fetchTodolistsTC,\r\n    addTodoTC\r\n}\r\nexport type zadachiType = T1\r\nexport type todoActionType = ActionsType\r\n\r\nexport {\r\n    todoSelectors,\r\n    todolistReducer,\r\n    todolistActions\r\n}\r\n","import React from 'react';\r\nimport {CustomButton, CustomInputText} from '../index';\r\nimport {AddingFieldPropsType} from './type';\r\n\r\nexport const AddingField = React.memo(({\r\n                                status,\r\n                                onEnterHandler,\r\n                                onClickAddHandler,\r\n                                inputText,\r\n                                onchangeHandler,\r\n                                error, ...props\r\n                            }: AddingFieldPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <CustomInputText onChange={onchangeHandler}\r\n                             value={inputText}\r\n                             error={error}\r\n                             onEnter={onEnterHandler}\r\n            />\r\n            <CustomButton nameButton={'Добавить задачу'}\r\n                          onClick={onClickAddHandler}\r\n                          disabled={status === 'loading' || inputText.length === 0}/>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './CustomButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype CustomButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    nameButton: string\r\n}\r\n\r\nexport const CustomButton: React.FC<CustomButtonPropsType> = React.memo((\r\n    {red, className,nameButton, ...props}\r\n) => {\r\n    const finalClassName =  props.disabled ? `${s.default} ${s.disabled}` : (red ? `${s.default} ${s.red}` : s.default)\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...props} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        >{nameButton}</button>\r\n    )\r\n})\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './CustomCheckBox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype CustomCheckBoxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nexport const CustomCheckBox: React.FC<CustomCheckBoxPropsType> = React.memo((\r\n    {   type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children,\r\n        ...props}\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    return (\r\n            <label className={s.checkboxLabel}>\r\n                <input\r\n                    type={'checkbox'}\r\n                    onChange={onChangeCallback}\r\n                    className={s.checkbox}\r\n\r\n                    {...props} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n                />\r\n                {children && <span className={s.spanClassName}>{children}</span>}\r\n            </label>\r\n        //</div>\r\n    )\r\n}\r\n)","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './CustomInput.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\nexport type  CustomInputType = DefaultInputPropsType & { // пропсы обычного инпута + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string|null\r\n    spanClassName?: string\r\n}\r\n\r\nexport const CustomInputText: React.FC<CustomInputType> = React.memo((\r\n    {   type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n        ...props}) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalInputClassName = error? `${s.errorInput} ${s.superInput}`: `${s.superInput}`\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                placeholder={error? 'Поле пустое':''}\r\n                type={type}\r\n                {...props} // value  внутри\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n)\r\n\r\n","import React from 'react';\r\nimport s from './Loading.module.css'\r\n\r\n\r\nexport const Loading = React.memo(() => {\r\n    return (\r\n        <div className={s.loading}>Пожалуйста , подождите...</div>\r\n    );\r\n});\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todolistReducer} from '../BLL/TodoList_reducer/todoList-reducer';\r\nimport {appReducer} from '../BLL/App_reducer/app-reducer';\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    todoList: todolistReducer,\r\n    app: appReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n//хук, который автоматически подставляет типизацию рутового стейта\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React, {ChangeEventHandler, MouseEventHandler, useCallback, useState} from 'react';\r\nimport s from './ToDoList.module.css'\r\nimport {todolistActions} from \"../../BLL/TodoList_reducer\";\r\nimport {appActions, appSelectors} from '../../BLL/App_reducer';\r\nimport {FilteringButtons, TodoListType, Zadacha} from './index';\r\nimport {activeFilterType, useAppSelector} from '../../APP';\r\nimport {AddingField} from '../Common_Components';\r\nimport {useDispatch} from 'react-redux';\r\n\r\n//лист заданий\r\n\r\nexport const TodoList = React.memo(({value, zadachi, status, ...props}: TodoListType) => {\r\n\r\n    const error = useAppSelector<string | null>(appSelectors.selectError)\r\n    const dispatch = useDispatch()\r\n\r\n    //action creators\r\n    const {addTodoTC} = todolistActions\r\n    const {setAppError} = appActions\r\n    //храним значения поля ввода\r\n    const [inputText, setInputText] = useState<string>('')\r\n    //храним значения статуса\r\n    const [activeFilter, setActiveFilter] = useState<activeFilterType>('all')\r\n\r\n    //обработчик изменения поля ввода\r\n    const onchangeHandler: ChangeEventHandler<HTMLInputElement> = useCallback((e) => {\r\n        dispatch(setAppError(null))\r\n        setInputText(e.currentTarget.value)\r\n    }, [dispatch, setAppError])\r\n\r\n    //обработчик добавления задачи при нажатие на кнопку\r\n    const onClickAddHandler: MouseEventHandler<HTMLButtonElement> = useCallback((e) => {\r\n        if (inputText.trim().length) {\r\n            dispatch(addTodoTC(inputText.trim()))\r\n            setInputText('')\r\n        } else {\r\n            dispatch(setAppError('Пожалуйста, введите значение'))\r\n        }\r\n    }, [dispatch, inputText, addTodoTC, setAppError])\r\n\r\n    //обработчик добавления задачи при нажатие на Enter\r\n    const onEnterHandler = useCallback(() => {\r\n        if (inputText.trim().length) {\r\n            dispatch(addTodoTC(inputText.trim()))\r\n            setInputText('')\r\n        } else {\r\n            dispatch(setAppError('Пожалуйста, введите значение'))\r\n        }\r\n    }, [dispatch, inputText, addTodoTC, setAppError])\r\n\r\n    //фильтруем задачи в зависимости от статуса активности\r\n    let tasksForTodolist = zadachi\r\n    if (activeFilter === 'active') {\r\n        tasksForTodolist = zadachi.filter(z => z.active)\r\n    }\r\n    if (activeFilter === 'completed') {\r\n        tasksForTodolist = zadachi.filter(z => !z.active)\r\n    }\r\n\r\n    return (\r\n        <div className={s.paperContainer}>\r\n            <h2 className={s.value}>{value}</h2>\r\n            <AddingField status={status} onEnterHandler={onEnterHandler}\r\n                         onClickAddHandler={onClickAddHandler}\r\n                         inputText={inputText}\r\n                         onchangeHandler={onchangeHandler}\r\n                         error={error}/>\r\n            <ul className={s.tasks}>\r\n                {tasksForTodolist.map(t =>\r\n                    <Zadacha key={t.id} task={t}\r\n                             clickCheckBox={props.clickCheckBox}\r\n                             clickRemoveBtn={props.clickRemoveBtn}/>)}\r\n            </ul>\r\n            <FilteringButtons status={status} setActiveFilter={setActiveFilter}/>\r\n            {error && <span className={s.error}>{error}</span>}\r\n        </div>\r\n    );\r\n});\r\n","import React, {ChangeEventHandler, MouseEventHandler, useCallback} from 'react';\r\nimport s from './Zadacha.module.css'\r\nimport {CustomButton, CustomCheckBox} from '../../Common_Components';\r\nimport {zadachaPropsType} from '../index';\r\n\r\n\r\n//отрисовка каждой отдельной задачи\r\nexport const Zadacha = React.memo(({task, clickCheckBox, clickRemoveBtn,}: zadachaPropsType) => {\r\n\r\n    // обработчик изменения чекбокса\r\n    const clickCheckBoxHandler: ChangeEventHandler<HTMLInputElement> = useCallback((e) => {\r\n        clickCheckBox(task.id, e.currentTarget.checked)\r\n    },[task.id, clickCheckBox])\r\n\r\n    // обработчик нажатия на кнопку 'Х' (удаление)\r\n    const clickRemoveBtnHandler: MouseEventHandler<HTMLButtonElement> = useCallback((e) => {\r\n        clickRemoveBtn(task.id)\r\n    },[task.id])\r\n\r\n    // цвет галочки\r\n    const styleV = task.active ? s.isActive : s.isNotActive\r\n\r\n    return (\r\n        <li key={task.id} id={task.id} className={s.item}>\r\n            <span className={styleV}> &#10004; </span>\r\n            <span className={s.text}>\r\n                    {task.text}</span>\r\n            <div className={s.itemMenu}>\r\n                <CustomCheckBox checked={task.active} onChange={clickCheckBoxHandler}/>\r\n                <CustomButton nameButton={'X'} red={true} onClick={clickRemoveBtnHandler}/>\r\n            </div>\r\n        </li>\r\n\r\n    );\r\n});\r\n","import s from './FilteringButtons.module.css';\r\nimport React, {useCallback} from 'react';\r\nimport {CustomButton} from '../../Common_Components';\r\nimport {FilteringButtonsType} from \"./types\";\r\n\r\n\r\n//меню кнопок Активные/Все/завершенные внутри туду листа\r\n\r\nexport const FilteringButtons= React.memo(({status,setActiveFilter}:FilteringButtonsType )=>{\r\n    const clickBtnAll = useCallback(()=> setActiveFilter('all'),[setActiveFilter])\r\n    const clickBtnActive = useCallback(()=> setActiveFilter('active'),[setActiveFilter])\r\n    const clickBtnCompleted = useCallback(()=> setActiveFilter('completed'),[setActiveFilter])\r\n\r\n    return(\r\n        <div className={s.btnMenu}>\r\n            <CustomButton onClick={clickBtnActive} nameButton={'Активные'} disabled={status==='loading'}  />\r\n            <CustomButton onClick={clickBtnAll} nameButton={'Все'} disabled={status==='loading'}  />\r\n            <CustomButton onClick={clickBtnCompleted} nameButton={'Завершенные'} disabled={status==='loading'}  />\r\n        </div>\r\n    );\r\n})","import React, {useCallback, useEffect} from 'react';\nimport s from './App.module.css';\nimport {useDispatch} from 'react-redux';\nimport {appSelectors, RequestStatusType} from '../BLL/App_reducer';\nimport {todolistActions, todoSelectors, zadachiType} from '../BLL/TodoList_reducer';\nimport {Loading} from '../UI/Common_Components';\nimport {TodoList} from '../UI/ToDoList';\nimport {useAppSelector} from './store';\n\n\nfunction App() {\n    const status = useAppSelector<RequestStatusType>(appSelectors.selectStatus)\n    const zadachi = useAppSelector<Array<zadachiType>>(todoSelectors.selectedZadachi)\n    const dispatch = useDispatch()\n\n    const {changeStatus, removeTodo, fetchTodolistsTC} = todolistActions\n\n     //изменение статуса активности\n    const clickCheckBox = useCallback((id: string, active: boolean) => {\n        dispatch(changeStatus(id, active))\n    }, [dispatch, changeStatus])\n\n    //удаление  задачи\n    const clickRemoveBtn = useCallback((id: string) => {\n        dispatch(removeTodo(id))\n    }, [dispatch, removeTodo])\n\n    useEffect(() => {\n        dispatch(fetchTodolistsTC())\n    }, [])\n\n    return (\n        <div className={s.App}>\n            {status === 'loading' ? <Loading/> :\n                <TodoList\n                    value={\"Задача 1\"}\n                    id={'1'}\n                    zadachi={zadachi}\n                    status={status}\n                    clickCheckBox={clickCheckBox}\n                    clickRemoveBtn={clickRemoveBtn}\n                />}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './APP/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./APP/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"CustomButton_default__1kNB6\",\"red\":\"CustomButton_red__9hBXH\",\"disabled\":\"CustomButton_disabled__1Z1xJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Zadacha_item__1kyus\",\"itemMenu\":\"Zadacha_itemMenu__1lR0t\",\"isNotActive\":\"Zadacha_isNotActive__2-Nqd\",\"isActive\":\"Zadacha_isActive__13t8u\",\"text\":\"Zadacha_text__3fI-e\"};"],"sourceRoot":""}